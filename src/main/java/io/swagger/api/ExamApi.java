/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.13).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Exam;
import io.swagger.model.ModelApiResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.*;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.databind.ObjectMapper;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;

import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-04-02T21:58:31.998Z")

@Api(value = "Exam", description = "the Exam API")
@RequestMapping(value = "")
public interface ExamApi {
    Logger log = LoggerFactory.getLogger(ExamApi.class);
    
    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }
 
    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }
 
    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }
    @ApiOperation(value = "Add a new Exam to the seminar", nickname = "addExam", notes = "Add a new Exam to the Seminar", authorizations = {
        @Authorization(value = "seminar_auth", scopes = {
            @AuthorizationScope(scope = "write:events", description = "modify events in your account"),
            @AuthorizationScope(scope = "read:events", description = "read your events")
            })
    }, tags={ "Exam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/Exam",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    default ResponseEntity<Exam> addExam(@ApiParam(value = "Exams to be added to the seminar." ,required=true )  @Valid @RequestBody Exam body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExamApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Deletes an Exam", nickname = "deleteExam", notes = "", authorizations = {
        @Authorization(value = "seminar_auth", scopes = {
            @AuthorizationScope(scope = "write:events", description = "modify events in your account"),
            @AuthorizationScope(scope = "read:events", description = "read your events")
            })
    }, tags={ "Exam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Exam not found") })
    @RequestMapping(value = "/Exam/{ExamId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Exam> deleteExam(@ApiParam(value = "Exam id to delete",required=true) @PathVariable("ExamId") Long examId, @ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExamApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Finds events by status", nickname = "findeventsByStatus", notes = "Multiple status values can be provided with comma separated strings", response = Exam.class, responseContainer = "List", authorizations = {
        @Authorization(value = "seminar_auth", scopes = {
            @AuthorizationScope(scope = "write:events", description = "modify events in your account"),
            @AuthorizationScope(scope = "read:events", description = "read your events")
            })
    }, tags={ "Exam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Exam.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/Exam/findByStatus",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Exam>> findeventsByStatus(@NotNull @ApiParam(value = "Status values that need to be considered for filter", required = true, allowableValues = "available, pending, sold") @Valid @RequestParam(value = "status", required = true) List<String> status) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<Exam>  <id>123456789</id>  <name>Exam 1</name>  <description>The first added exam session by a Examinator added, which will take place on ... at the hour ...</description>  <photoUrls>    <photoUrls>aeiou</photoUrls>  </photoUrls>  <tags>  </tags>  <status>aeiou</status>  <date>15.03.2020  15:00</date>  <room>Room 111</room>  <examinator>Kamila Rolla</examinator></Exam>", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"date\" : \"15.03.2020  15:00\",  \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ],  \"examinator\" : \"Kamila Rolla\",  \"name\" : \"Exam 1\",  \"description\" : \"The first added exam session by a Examinator added, which will take place on ... at the hour ...\",  \"id\" : 0,  \"category\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"room\" : \"Room 111\",  \"tags\" : [ {    \"name\" : \"name\",    \"id\" : 1  }, {    \"name\" : \"name\",    \"id\" : 1  } ],  \"status\" : \"available\"}, {  \"date\" : \"15.03.2020  15:00\",  \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ],  \"examinator\" : \"Kamila Rolla\",  \"name\" : \"Exam 1\",  \"description\" : \"The first added exam session by a Examinator added, which will take place on ... at the hour ...\",  \"id\" : 0,  \"category\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"room\" : \"Room 111\",  \"tags\" : [ {    \"name\" : \"name\",    \"id\" : 1  }, {    \"name\" : \"name\",    \"id\" : 1  } ],  \"status\" : \"available\"} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExamApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Finds events by tags", nickname = "findeventsByTags", notes = "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.", response = Exam.class, responseContainer = "List", authorizations = {
        @Authorization(value = "seminar_auth", scopes = {
            @AuthorizationScope(scope = "write:events", description = "modify events in your account"),
            @AuthorizationScope(scope = "read:events", description = "read your events")
            })
    }, tags={ "Exam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Exam.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid tag value") })
    @RequestMapping(value = "/Exam/findByTags",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Exam>> findeventsByTags(@NotNull @ApiParam(value = "Tags to filter by", required = true) @Valid @RequestParam(value = "tags", required = true) List<String> tags) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<Exam>  <id>123456789</id>  <name>Exam 1</name>  <description>The first added exam session by a Examinator added, which will take place on ... at the hour ...</description>  <photoUrls>    <photoUrls>aeiou</photoUrls>  </photoUrls>  <tags>  </tags>  <status>aeiou</status>  <date>15.03.2020  15:00</date>  <room>Room 111</room>  <examinator>Kamila Rolla</examinator></Exam>", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"date\" : \"15.03.2020  15:00\",  \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ],  \"examinator\" : \"Kamila Rolla\",  \"name\" : \"Exam 1\",  \"description\" : \"The first added exam session by a Examinator added, which will take place on ... at the hour ...\",  \"id\" : 0,  \"category\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"room\" : \"Room 111\",  \"tags\" : [ {    \"name\" : \"name\",    \"id\" : 1  }, {    \"name\" : \"name\",    \"id\" : 1  } ],  \"status\" : \"available\"}, {  \"date\" : \"15.03.2020  15:00\",  \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ],  \"examinator\" : \"Kamila Rolla\",  \"name\" : \"Exam 1\",  \"description\" : \"The first added exam session by a Examinator added, which will take place on ... at the hour ...\",  \"id\" : 0,  \"category\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"room\" : \"Room 111\",  \"tags\" : [ {    \"name\" : \"name\",    \"id\" : 1  }, {    \"name\" : \"name\",    \"id\" : 1  } ],  \"status\" : \"available\"} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExamApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Find Exam by ID", nickname = "getExamById", notes = "Returns a single Exam", response = Exam.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "Exam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Exam.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Exam not found") })
    @RequestMapping(value = "/Exam/{ExamId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Exam> getExamById(@ApiParam(value = "ID of Exam to return",required=true) @PathVariable("ExamId") Long examId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<Exam>  <id>123456789</id>  <name>Exam 1</name>  <description>The first added exam session by a Examinator added, which will take place on ... at the hour ...</description>  <photoUrls>    <photoUrls>aeiou</photoUrls>  </photoUrls>  <tags>  </tags>  <status>aeiou</status>  <date>15.03.2020  15:00</date>  <room>Room 111</room>  <examinator>Kamila Rolla</examinator></Exam>", Exam.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"date\" : \"15.03.2020  15:00\",  \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ],  \"examinator\" : \"Kamila Rolla\",  \"name\" : \"Exam 1\",  \"description\" : \"The first added exam session by a Examinator added, which will take place on ... at the hour ...\",  \"id\" : 0,  \"category\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"room\" : \"Room 111\",  \"tags\" : [ {    \"name\" : \"name\",    \"id\" : 1  }, {    \"name\" : \"name\",    \"id\" : 1  } ],  \"status\" : \"available\"}", Exam.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExamApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update an existing Exam", nickname = "updateExam", notes = "Change or add information about an existing Exam", authorizations = {
        @Authorization(value = "seminar_auth", scopes = {
            @AuthorizationScope(scope = "write:events", description = "modify events in your account"),
            @AuthorizationScope(scope = "read:events", description = "read your events")
            })
    }, tags={ "Exam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Exam not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/Exam",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    default ResponseEntity<Exam> updateExam(@ApiParam(value = "exams that needs to be added to the Seminar" ,required=true )  @Valid @RequestBody Exam body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExamApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Updates an Exam in the Seminar with form data", nickname = "updateExamWithForm", notes = "", authorizations = {
        @Authorization(value = "seminar_auth", scopes = {
            @AuthorizationScope(scope = "write:events", description = "modify events in your account"),
            @AuthorizationScope(scope = "read:events", description = "read your events")
            })
    }, tags={ "Exam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/Exam/{ExamId}",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> updateExamWithForm(@ApiParam(value = "ID of Exam that needs to be updated",required=true) @PathVariable("ExamId") Long examId,@ApiParam(value = "Updated name of the Exam") @RequestParam(value="name", required=false)  String name,@ApiParam(value = "Updated status of the Exam") @RequestParam(value="status", required=false)  String status) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExamApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "uploads an image", nickname = "uploadFile2", notes = "", response = ModelApiResponse.class, authorizations = {
        @Authorization(value = "seminar_auth", scopes = {
            @AuthorizationScope(scope = "write:events", description = "modify events in your account"),
            @AuthorizationScope(scope = "read:events", description = "read your events")
            })
    }, tags={ "Exam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ModelApiResponse.class) })
    @RequestMapping(value = "/Exam/{ExamId}/uploadImage",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    default ResponseEntity<ModelApiResponse> uploadFile2(@ApiParam(value = "ID of Exam to update",required=true) @PathVariable("ExamId") Long examId,@ApiParam(value = "Additional data to pass to server") @RequestParam(value="additionalMetadata", required=false)  String additionalMetadata,@ApiParam(value = "file to upload") @Valid @RequestPart(value="file", required=false) MultipartFile file) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"code\" : 0,  \"type\" : \"type\",  \"message\" : \"message\"}", ModelApiResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExamApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
