/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.13).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Exam;
import io.swagger.model.Information;
import io.swagger.annotations.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.databind.ObjectMapper;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import java.io.IOException;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-04-02T21:58:31.998Z")

@Api(value = "Information", description = "the Information API")
@RequestMapping(value = "")
public interface InformationApi {
    Logger log = LoggerFactory.getLogger(InformationApi.class);
    
    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }
 
    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }
 
    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }
    @ApiOperation(value = "Add a new Post to the seminar", nickname = "addInformation", notes = "Add a new Information to the Seminar", tags={ "Information", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/Information",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    default ResponseEntity<Information> addInformation(@ApiParam(value = "informations to be added to the seminar." ,required=true )  @Valid @RequestBody Information body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default InformationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Deletes a post", nickname = "deletePost", notes = "", tags={ "Information", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Post not found") })
    @RequestMapping(value = "/Information/{InformationId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Information> deletePost(@ApiParam(value = "Post id to delete",required=true) @PathVariable("InformationId") Long informationId, @ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default InformationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Find info by ID", nickname = "getinformationById", notes = "Returns a single post", response = Information.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "Information", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Information.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Post not found") })
    @RequestMapping(value = "/Information/{InformationId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Information> getinformationById(@ApiParam(value = "ID of post to return",required=true) @PathVariable("InformationId") Long informationId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/xml")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("<Information>  <id>123456789</id>  <name>Post 1</name>  <description>Training 1 date has been postponed by half an hour</description>  <photoUrls>    <photoUrls>aeiou</photoUrls>  </photoUrls>  <tags>  </tags>  <date>15.03.2020</date>  <author>Kamila Rolla</author></Information>", Information.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/xml", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"date\" : \"15.03.2020\",  \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ],  \"author\" : \"Kamila Rolla\",  \"name\" : \"Post 1\",  \"description\" : \"Training 1 date has been postponed by half an hour\",  \"id\" : 0,  \"category\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"tags\" : [ {    \"name\" : \"name\",    \"id\" : 1  }, {    \"name\" : \"name\",    \"id\" : 1  } ]}", Information.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default InformationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update an existing Information", nickname = "updateInfo", notes = "Change or add information / post", tags={ "Information", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Exam not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/Information",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    default ResponseEntity<Information> updateInfo(@ApiParam(value = "informations that needs to be added to the Seminar" ,required=true )  @Valid @RequestBody Exam body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default InformationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Updates an post in the Seminar with form data", nickname = "updatePosttWithForm", notes = "", tags={ "Information", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/Information/{InformationId}",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> updatePosttWithForm(@ApiParam(value = "ID of post that needs to be updated",required=true) @PathVariable("InformationId") Long informationId,@ApiParam(value = "Updated name of the information") @RequestParam(value="name", required=false)  String name,@ApiParam(value = "Updated status of the information") @RequestParam(value="status", required=false)  String status) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default InformationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
